syntax = "proto3";
package v1;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "Flairs service";
        version: "1.0";
		contact: {
			name: "flairs mobile banking system";
			url: "http://www.alphaplus.finance/";
			email: "dammydarmy@gmail.com";
        };
    };
    host:"localhost:9000";
    schemes: [HTTP, HTTPS];
    consumes: "application/json";
    produces: "application/json";
    responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
    }
    security_definitions: {
           security:{
            key:"flairs_token" 
            value{
                type: TYPE_API_KEY
                in: IN_HEADER
                name: "Authorization"
                description: "Authentication token, passed into header"
              }
           }
    }
    security: {
        security_requirement: {
          key: "flairs_token"
        }
      }
};

message Wallet{
    string ID =1;
    string userId = 2;
    float accountBal = 10;
    float ledgerBal = 12;
    int32 type = 6;
    int32 access = 8;
    string accessDate = 14;
    string memo = 15;
    string name = 7;
    string status = 3;
    string currency = 9;
    string dateCreated = 11;
    string dateBalUpdate = 4;
    string lastUpdate = 13;
}


message getOneWalletRes{
    float accountBal = 10;
    float ledgerBal = 12;
    int32 walletType = 6;
    string memo = 8;
    string name = 7;
    string status = 3;
    string currency = 9;
    string dateCreated = 11;
    string dateBalUpdate = 4;
    string lastUpdate = 13;
}

message WalletsResponse{
    repeated Wallet wallets = 3;
}

message getMyWalletsRequest{
     string userId = 3;
}

message getOneWalletReq{
    string walletId = 3;
}

message WalletUpdate{
    string memo = 8;
    string name = 7;
    string status = 3;
    int32 access = 1;
}

message updateWalletReq{
    string walletId = 3;
    WalletUpdate wallet = 1;
}
message updateWalletRes{
    string walletId = 3;
}
message WalletTerms{
    int32 ID=1;
    string name=3;
    string description = 4;
    string withdrawDay = 2;
}

message WalletType{
    int32 ID=1;
    string name=3;
    string description = 4;
}

message newWalletRequest{
    string name = 7;
    string userId = 2;
    enum walletType {
        Default = 0;
        Indulgent = 1;
        savings = 3;
        fixed = 2;
    };
    walletType type=6;
    enum accessType {
        Open = 0;
        Specific = 1;
    };
    accessType access = 13;
    string currency = 9;
    string memo = 8;
    string status=1;
    float accountBal = 10;
    float ledgerBal = 12;
}

message addWalletResponse{
    string ID=1;
}

message newWalletTypeRequest{
    string name=3;
    string description = 4;
}

message addWalletTypeResponse{
    string ID=1;
}

message newWalletTermRequest{
    string name=3;
    string description = 4;
    int32 withdrawDay = 2;
}

message addWalletTermResponse{
    string ID=1;
}


message performTransactionReq{
        string walletID = 2;
        float amount=1;
}

message performTransactionRes{
    string ID = 2;
}


service WalletService{
       // Create a new wallet
       rpc AddNewWallet (newWalletRequest) returns (addWalletResponse){
        option (google.api.http)={
            post: "/v1/wallet"
            body:"*"
        };
    }

      // Debit or credit a wallet
      rpc Transact (performTransactionReq) returns (performTransactionRes){
        option (google.api.http)={
            post: "/v1/wallet/transact/{walletID}"
            body:"*"
        };
    }

          // Update a wallet
          rpc UpdateWallet (updateWalletReq) returns (updateWalletRes){
            option (google.api.http)={
                put: "/v1/wallet/{walletId}"
                body:"*"
            };
        }

        

       // Get wallets beloging to a particular user 
       rpc GetMyWallets (getMyWalletsRequest) returns (WalletsResponse){
        option (google.api.http)={
            get: "/v1/wallets/{userId}"
        };
    }

     // Get wallet using the walletID
     rpc GetOneWallet (getOneWalletReq) returns (getOneWalletRes){
        option (google.api.http)={
            get: "/v1/wallet/{walletId}"
        };
    }
        // Create a new wallet terms
       // rpc AddWalletTerm (newWalletTermRequest) returns (addWalletTermResponse){
        //    option (google.api.http)={
         //       post: "/v1/wallet_term"
         //       body:"*"
         //   };
       // }

               // Create a new wallet type
       rpc AddWalletType (newWalletTypeRequest) returns (addWalletTypeResponse){
        option (google.api.http)={
            post: "/v1/wallet_type"
            body:"*"
        };
    }
}