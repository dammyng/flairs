// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: flairs-wallet.proto

package wallet_v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type WalletType int32

const (
	WalletType_Default   WalletType = 0
	WalletType_Indulgent WalletType = 1
	WalletType_savings   WalletType = 3
	WalletType_fixed     WalletType = 2
)

// Enum value maps for WalletType.
var (
	WalletType_name = map[int32]string{
		0: "Default",
		1: "Indulgent",
		3: "savings",
		2: "fixed",
	}
	WalletType_value = map[string]int32{
		"Default":   0,
		"Indulgent": 1,
		"savings":   3,
		"fixed":     2,
	}
)

func (x WalletType) Enum() *WalletType {
	p := new(WalletType)
	*p = x
	return p
}

func (x WalletType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletType) Descriptor() protoreflect.EnumDescriptor {
	return file_flairs_wallet_proto_enumTypes[0].Descriptor()
}

func (WalletType) Type() protoreflect.EnumType {
	return &file_flairs_wallet_proto_enumTypes[0]
}

func (x WalletType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalletType.Descriptor instead.
func (WalletType) EnumDescriptor() ([]byte, []int) {
	return file_flairs_wallet_proto_rawDescGZIP(), []int{0}
}

type Currency int32

const (
	Currency_NGR Currency = 0
)

// Enum value maps for Currency.
var (
	Currency_name = map[int32]string{
		0: "NGR",
	}
	Currency_value = map[string]int32{
		"NGR": 0,
	}
)

func (x Currency) Enum() *Currency {
	p := new(Currency)
	*p = x
	return p
}

func (x Currency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Currency) Descriptor() protoreflect.EnumDescriptor {
	return file_flairs_wallet_proto_enumTypes[1].Descriptor()
}

func (Currency) Type() protoreflect.EnumType {
	return &file_flairs_wallet_proto_enumTypes[1]
}

func (x Currency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Currency.Descriptor instead.
func (Currency) EnumDescriptor() ([]byte, []int) {
	return file_flairs_wallet_proto_rawDescGZIP(), []int{1}
}

type Wallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UserId        string   `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Type          int32    `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	AccessDate    string   `protobuf:"bytes,14,opt,name=accessDate,proto3" json:"accessDate,omitempty"`
	Memo          string   `protobuf:"bytes,15,opt,name=memo,proto3" json:"memo,omitempty"`
	Name          string   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Status        string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Currency      Currency `protobuf:"varint,9,opt,name=currency,proto3,enum=wallet_v1.Currency" json:"currency,omitempty"`
	DateCreated   string   `protobuf:"bytes,11,opt,name=dateCreated,proto3" json:"dateCreated,omitempty"`
	DateBalUpdate string   `protobuf:"bytes,4,opt,name=dateBalUpdate,proto3" json:"dateBalUpdate,omitempty"`
	LastUpdate    string   `protobuf:"bytes,13,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
}

func (x *Wallet) Reset() {
	*x = Wallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_wallet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wallet) ProtoMessage() {}

func (x *Wallet) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_wallet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wallet.ProtoReflect.Descriptor instead.
func (*Wallet) Descriptor() ([]byte, []int) {
	return file_flairs_wallet_proto_rawDescGZIP(), []int{0}
}

func (x *Wallet) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Wallet) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Wallet) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Wallet) GetAccessDate() string {
	if x != nil {
		return x.AccessDate
	}
	return ""
}

func (x *Wallet) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *Wallet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Wallet) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Wallet) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_NGR
}

func (x *Wallet) GetDateCreated() string {
	if x != nil {
		return x.DateCreated
	}
	return ""
}

func (x *Wallet) GetDateBalUpdate() string {
	if x != nil {
		return x.DateBalUpdate
	}
	return ""
}

func (x *Wallet) GetLastUpdate() string {
	if x != nil {
		return x.LastUpdate
	}
	return ""
}

type GetWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountBal    float32    `protobuf:"fixed32,10,opt,name=accountBal,proto3" json:"accountBal,omitempty"`
	LedgerBal     float32    `protobuf:"fixed32,12,opt,name=ledgerBal,proto3" json:"ledgerBal,omitempty"`
	Type          WalletType `protobuf:"varint,6,opt,name=type,proto3,enum=wallet_v1.WalletType" json:"type,omitempty"`
	Memo          string     `protobuf:"bytes,8,opt,name=memo,proto3" json:"memo,omitempty"`
	Name          string     `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Status        string     `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Currency      Currency   `protobuf:"varint,9,opt,name=currency,proto3,enum=wallet_v1.Currency" json:"currency,omitempty"`
	DateCreated   string     `protobuf:"bytes,11,opt,name=dateCreated,proto3" json:"dateCreated,omitempty"`
	DateBalUpdate string     `protobuf:"bytes,4,opt,name=dateBalUpdate,proto3" json:"dateBalUpdate,omitempty"`
	LastUpdate    string     `protobuf:"bytes,13,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
}

func (x *GetWalletResponse) Reset() {
	*x = GetWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_wallet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletResponse) ProtoMessage() {}

func (x *GetWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_wallet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletResponse.ProtoReflect.Descriptor instead.
func (*GetWalletResponse) Descriptor() ([]byte, []int) {
	return file_flairs_wallet_proto_rawDescGZIP(), []int{1}
}

func (x *GetWalletResponse) GetAccountBal() float32 {
	if x != nil {
		return x.AccountBal
	}
	return 0
}

func (x *GetWalletResponse) GetLedgerBal() float32 {
	if x != nil {
		return x.LedgerBal
	}
	return 0
}

func (x *GetWalletResponse) GetType() WalletType {
	if x != nil {
		return x.Type
	}
	return WalletType_Default
}

func (x *GetWalletResponse) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *GetWalletResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetWalletResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetWalletResponse) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_NGR
}

func (x *GetWalletResponse) GetDateCreated() string {
	if x != nil {
		return x.DateCreated
	}
	return ""
}

func (x *GetWalletResponse) GetDateBalUpdate() string {
	if x != nil {
		return x.DateBalUpdate
	}
	return ""
}

func (x *GetWalletResponse) GetLastUpdate() string {
	if x != nil {
		return x.LastUpdate
	}
	return ""
}

type WalletsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wallets []*Wallet `protobuf:"bytes,3,rep,name=wallets,proto3" json:"wallets,omitempty"`
}

func (x *WalletsResponse) Reset() {
	*x = WalletsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_wallet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletsResponse) ProtoMessage() {}

func (x *WalletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_wallet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletsResponse.ProtoReflect.Descriptor instead.
func (*WalletsResponse) Descriptor() ([]byte, []int) {
	return file_flairs_wallet_proto_rawDescGZIP(), []int{2}
}

func (x *WalletsResponse) GetWallets() []*Wallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

type GetMyWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GetMyWalletsRequest) Reset() {
	*x = GetMyWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_wallet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyWalletsRequest) ProtoMessage() {}

func (x *GetMyWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_wallet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyWalletsRequest.ProtoReflect.Descriptor instead.
func (*GetMyWalletsRequest) Descriptor() ([]byte, []int) {
	return file_flairs_wallet_proto_rawDescGZIP(), []int{3}
}

func (x *GetMyWalletsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetOneWalletReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,3,opt,name=walletId,proto3" json:"walletId,omitempty"`
}

func (x *GetOneWalletReq) Reset() {
	*x = GetOneWalletReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_wallet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOneWalletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneWalletReq) ProtoMessage() {}

func (x *GetOneWalletReq) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_wallet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneWalletReq.ProtoReflect.Descriptor instead.
func (*GetOneWalletReq) Descriptor() ([]byte, []int) {
	return file_flairs_wallet_proto_rawDescGZIP(), []int{4}
}

func (x *GetOneWalletReq) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type WalletUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Memo       string `protobuf:"bytes,8,opt,name=memo,proto3" json:"memo,omitempty"`
	Name       string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Status     string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	AccessDate string `protobuf:"bytes,14,opt,name=accessDate,proto3" json:"accessDate,omitempty"`
}

func (x *WalletUpdate) Reset() {
	*x = WalletUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_wallet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletUpdate) ProtoMessage() {}

func (x *WalletUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_wallet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletUpdate.ProtoReflect.Descriptor instead.
func (*WalletUpdate) Descriptor() ([]byte, []int) {
	return file_flairs_wallet_proto_rawDescGZIP(), []int{5}
}

func (x *WalletUpdate) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WalletUpdate) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *WalletUpdate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WalletUpdate) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WalletUpdate) GetAccessDate() string {
	if x != nil {
		return x.AccessDate
	}
	return ""
}

type UpdateWalletReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string        `protobuf:"bytes,3,opt,name=walletId,proto3" json:"walletId,omitempty"`
	Wallet   *WalletUpdate `protobuf:"bytes,1,opt,name=wallet,proto3" json:"wallet,omitempty"`
}

func (x *UpdateWalletReq) Reset() {
	*x = UpdateWalletReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_wallet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWalletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWalletReq) ProtoMessage() {}

func (x *UpdateWalletReq) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_wallet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWalletReq.ProtoReflect.Descriptor instead.
func (*UpdateWalletReq) Descriptor() ([]byte, []int) {
	return file_flairs_wallet_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateWalletReq) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *UpdateWalletReq) GetWallet() *WalletUpdate {
	if x != nil {
		return x.Wallet
	}
	return nil
}

type UpdateWalletRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,3,opt,name=walletId,proto3" json:"walletId,omitempty"`
}

func (x *UpdateWalletRes) Reset() {
	*x = UpdateWalletRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_wallet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWalletRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWalletRes) ProtoMessage() {}

func (x *UpdateWalletRes) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_wallet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWalletRes.ProtoReflect.Descriptor instead.
func (*UpdateWalletRes) Descriptor() ([]byte, []int) {
	return file_flairs_wallet_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateWalletRes) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type NewWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string     `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	UserId   string     `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Type     WalletType `protobuf:"varint,3,opt,name=type,proto3,enum=wallet_v1.WalletType" json:"type,omitempty"`
	Currency Currency   `protobuf:"varint,9,opt,name=currency,proto3,enum=wallet_v1.Currency" json:"currency,omitempty"`
	Memo     string     `protobuf:"bytes,8,opt,name=memo,proto3" json:"memo,omitempty"`
	Status   string     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *NewWalletRequest) Reset() {
	*x = NewWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_wallet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewWalletRequest) ProtoMessage() {}

func (x *NewWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_wallet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewWalletRequest.ProtoReflect.Descriptor instead.
func (*NewWalletRequest) Descriptor() ([]byte, []int) {
	return file_flairs_wallet_proto_rawDescGZIP(), []int{8}
}

func (x *NewWalletRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewWalletRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *NewWalletRequest) GetType() WalletType {
	if x != nil {
		return x.Type
	}
	return WalletType_Default
}

func (x *NewWalletRequest) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_NGR
}

func (x *NewWalletRequest) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *NewWalletRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type AddWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *AddWalletResponse) Reset() {
	*x = AddWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_wallet_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWalletResponse) ProtoMessage() {}

func (x *AddWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_wallet_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWalletResponse.ProtoReflect.Descriptor instead.
func (*AddWalletResponse) Descriptor() ([]byte, []int) {
	return file_flairs_wallet_proto_rawDescGZIP(), []int{9}
}

func (x *AddWalletResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type PerformTransactionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *PerformTransactionRes) Reset() {
	*x = PerformTransactionRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_wallet_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformTransactionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformTransactionRes) ProtoMessage() {}

func (x *PerformTransactionRes) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_wallet_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformTransactionRes.ProtoReflect.Descriptor instead.
func (*PerformTransactionRes) Descriptor() ([]byte, []int) {
	return file_flairs_wallet_proto_rawDescGZIP(), []int{10}
}

func (x *PerformTransactionRes) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

var File_flairs_wallet_proto protoreflect.FileDescriptor

var file_flairs_wallet_proto_rawDesc = []byte{
	0x0a, 0x13, 0x66, 0x6c, 0x61, 0x69, 0x72, 0x73, 0x2d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67,
	0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x02, 0x0a,
	0x06, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x76,
	0x31, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xd5, 0x02, 0x0a,
	0x11, 0x67, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x42, 0x61, 0x6c,
	0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x22, 0x3e, 0x0a, 0x0f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x22, 0x2d, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x4d, 0x79, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x0c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x22, 0x5e, 0x0a, 0x0f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a,
	0x0a, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0x2d, 0x0a, 0x0f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x10, 0x6e,
	0x65, 0x77, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x76, 0x31, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x23, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x27, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x2a, 0x40, 0x0a, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x49, 0x6e, 0x64, 0x75, 0x6c, 0x67, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x73,
	0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x10, 0x02, 0x2a, 0x13, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x07, 0x0a, 0x03, 0x4e, 0x47, 0x52, 0x10, 0x00, 0x32, 0xb7, 0x03, 0x0a, 0x0d, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x0c, 0x41, 0x64,
	0x64, 0x4e, 0x65, 0x77, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x6e, 0x65, 0x77, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f,
	0x76, 0x31, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x6e, 0x65, 0x77, 0x2f, 0x7b, 0x74,
	0x79, 0x70, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x68, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x76, 0x31, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x76, 0x31, 0x2e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x22,
	0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x1a, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2f, 0x7b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x7d, 0x3a, 0x01,
	0x2a, 0x12, 0x68, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x12, 0x1e, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x67, 0x65,
	0x74, 0x4d, 0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x7d, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x65, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x76, 0x31, 0x2e, 0x67, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x76, 0x31,
	0x2e, 0x67, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x7d, 0x42, 0xca, 0x02, 0x92, 0x41, 0xc6, 0x02, 0x12, 0x6a, 0x0a, 0x0e, 0x46, 0x6c, 0x61,
	0x69, 0x72, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x53, 0x0a, 0x1c, 0x66,
	0x6c, 0x61, 0x69, 0x72, 0x73, 0x20, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x20, 0x62, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x70, 0x6c, 0x75,
	0x73, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x1a, 0x14, 0x64, 0x61, 0x6d, 0x6d,
	0x79, 0x64, 0x61, 0x72, 0x6d, 0x79, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x32, 0x03, 0x31, 0x2e, 0x30, 0x1a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74,
	0x3a, 0x39, 0x30, 0x30, 0x30, 0x2a, 0x02, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x3b, 0x0a,
	0x03, 0x34, 0x30, 0x34, 0x12, 0x34, 0x0a, 0x2a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x07, 0x5a, 0x4f, 0x0a, 0x4d, 0x0a, 0x0c,
	0x66, 0x6c, 0x61, 0x69, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3d, 0x08, 0x02,
	0x12, 0x28, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x20, 0x69,
	0x6e, 0x74, 0x6f, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x12, 0x0a, 0x10, 0x0a,
	0x0c, 0x66, 0x6c, 0x61, 0x69, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flairs_wallet_proto_rawDescOnce sync.Once
	file_flairs_wallet_proto_rawDescData = file_flairs_wallet_proto_rawDesc
)

func file_flairs_wallet_proto_rawDescGZIP() []byte {
	file_flairs_wallet_proto_rawDescOnce.Do(func() {
		file_flairs_wallet_proto_rawDescData = protoimpl.X.CompressGZIP(file_flairs_wallet_proto_rawDescData)
	})
	return file_flairs_wallet_proto_rawDescData
}

var file_flairs_wallet_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_flairs_wallet_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_flairs_wallet_proto_goTypes = []interface{}{
	(WalletType)(0),               // 0: wallet_v1.WalletType
	(Currency)(0),                 // 1: wallet_v1.currency
	(*Wallet)(nil),                // 2: wallet_v1.Wallet
	(*GetWalletResponse)(nil),     // 3: wallet_v1.getWalletResponse
	(*WalletsResponse)(nil),       // 4: wallet_v1.WalletsResponse
	(*GetMyWalletsRequest)(nil),   // 5: wallet_v1.getMyWalletsRequest
	(*GetOneWalletReq)(nil),       // 6: wallet_v1.getOneWalletReq
	(*WalletUpdate)(nil),          // 7: wallet_v1.WalletUpdate
	(*UpdateWalletReq)(nil),       // 8: wallet_v1.updateWalletReq
	(*UpdateWalletRes)(nil),       // 9: wallet_v1.updateWalletRes
	(*NewWalletRequest)(nil),      // 10: wallet_v1.newWalletRequest
	(*AddWalletResponse)(nil),     // 11: wallet_v1.addWalletResponse
	(*PerformTransactionRes)(nil), // 12: wallet_v1.performTransactionRes
}
var file_flairs_wallet_proto_depIdxs = []int32{
	1,  // 0: wallet_v1.Wallet.currency:type_name -> wallet_v1.currency
	0,  // 1: wallet_v1.getWalletResponse.type:type_name -> wallet_v1.WalletType
	1,  // 2: wallet_v1.getWalletResponse.currency:type_name -> wallet_v1.currency
	2,  // 3: wallet_v1.WalletsResponse.wallets:type_name -> wallet_v1.Wallet
	7,  // 4: wallet_v1.updateWalletReq.wallet:type_name -> wallet_v1.WalletUpdate
	0,  // 5: wallet_v1.newWalletRequest.type:type_name -> wallet_v1.WalletType
	1,  // 6: wallet_v1.newWalletRequest.currency:type_name -> wallet_v1.currency
	10, // 7: wallet_v1.WalletService.AddNewWallet:input_type -> wallet_v1.newWalletRequest
	8,  // 8: wallet_v1.WalletService.UpdateWallet:input_type -> wallet_v1.updateWalletReq
	5,  // 9: wallet_v1.WalletService.GetMyWallets:input_type -> wallet_v1.getMyWalletsRequest
	6,  // 10: wallet_v1.WalletService.GetWallet:input_type -> wallet_v1.getOneWalletReq
	11, // 11: wallet_v1.WalletService.AddNewWallet:output_type -> wallet_v1.addWalletResponse
	9,  // 12: wallet_v1.WalletService.UpdateWallet:output_type -> wallet_v1.updateWalletRes
	4,  // 13: wallet_v1.WalletService.GetMyWallets:output_type -> wallet_v1.WalletsResponse
	3,  // 14: wallet_v1.WalletService.GetWallet:output_type -> wallet_v1.getWalletResponse
	11, // [11:15] is the sub-list for method output_type
	7,  // [7:11] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_flairs_wallet_proto_init() }
func file_flairs_wallet_proto_init() {
	if File_flairs_wallet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flairs_wallet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_wallet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_wallet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_wallet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_wallet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOneWalletReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_wallet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_wallet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWalletReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_wallet_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWalletRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_wallet_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_wallet_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_wallet_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformTransactionRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flairs_wallet_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flairs_wallet_proto_goTypes,
		DependencyIndexes: file_flairs_wallet_proto_depIdxs,
		EnumInfos:         file_flairs_wallet_proto_enumTypes,
		MessageInfos:      file_flairs_wallet_proto_msgTypes,
	}.Build()
	File_flairs_wallet_proto = out.File
	file_flairs_wallet_proto_rawDesc = nil
	file_flairs_wallet_proto_goTypes = nil
	file_flairs_wallet_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WalletServiceClient is the client API for WalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalletServiceClient interface {
	// Create a new wallet
	AddNewWallet(ctx context.Context, in *NewWalletRequest, opts ...grpc.CallOption) (*AddWalletResponse, error)
	// Update a wallet
	UpdateWallet(ctx context.Context, in *UpdateWalletReq, opts ...grpc.CallOption) (*UpdateWalletRes, error)
	// Get wallets beloging to a particular user
	GetMyWallets(ctx context.Context, in *GetMyWalletsRequest, opts ...grpc.CallOption) (*WalletsResponse, error)
	// Get wallet using the walletID
	GetWallet(ctx context.Context, in *GetOneWalletReq, opts ...grpc.CallOption) (*GetWalletResponse, error)
}

type walletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServiceClient(cc grpc.ClientConnInterface) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) AddNewWallet(ctx context.Context, in *NewWalletRequest, opts ...grpc.CallOption) (*AddWalletResponse, error) {
	out := new(AddWalletResponse)
	err := c.cc.Invoke(ctx, "/wallet_v1.WalletService/AddNewWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) UpdateWallet(ctx context.Context, in *UpdateWalletReq, opts ...grpc.CallOption) (*UpdateWalletRes, error) {
	out := new(UpdateWalletRes)
	err := c.cc.Invoke(ctx, "/wallet_v1.WalletService/UpdateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetMyWallets(ctx context.Context, in *GetMyWalletsRequest, opts ...grpc.CallOption) (*WalletsResponse, error) {
	out := new(WalletsResponse)
	err := c.cc.Invoke(ctx, "/wallet_v1.WalletService/GetMyWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetWallet(ctx context.Context, in *GetOneWalletReq, opts ...grpc.CallOption) (*GetWalletResponse, error) {
	out := new(GetWalletResponse)
	err := c.cc.Invoke(ctx, "/wallet_v1.WalletService/GetWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServiceServer is the server API for WalletService service.
type WalletServiceServer interface {
	// Create a new wallet
	AddNewWallet(context.Context, *NewWalletRequest) (*AddWalletResponse, error)
	// Update a wallet
	UpdateWallet(context.Context, *UpdateWalletReq) (*UpdateWalletRes, error)
	// Get wallets beloging to a particular user
	GetMyWallets(context.Context, *GetMyWalletsRequest) (*WalletsResponse, error)
	// Get wallet using the walletID
	GetWallet(context.Context, *GetOneWalletReq) (*GetWalletResponse, error)
}

// UnimplementedWalletServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWalletServiceServer struct {
}

func (*UnimplementedWalletServiceServer) AddNewWallet(context.Context, *NewWalletRequest) (*AddWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewWallet not implemented")
}
func (*UnimplementedWalletServiceServer) UpdateWallet(context.Context, *UpdateWalletReq) (*UpdateWalletRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWallet not implemented")
}
func (*UnimplementedWalletServiceServer) GetMyWallets(context.Context, *GetMyWalletsRequest) (*WalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyWallets not implemented")
}
func (*UnimplementedWalletServiceServer) GetWallet(context.Context, *GetOneWalletReq) (*GetWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallet not implemented")
}

func RegisterWalletServiceServer(s *grpc.Server, srv WalletServiceServer) {
	s.RegisterService(&_WalletService_serviceDesc, srv)
}

func _WalletService_AddNewWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).AddNewWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_v1.WalletService/AddNewWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).AddNewWallet(ctx, req.(*NewWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_UpdateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).UpdateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_v1.WalletService/UpdateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).UpdateWallet(ctx, req.(*UpdateWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetMyWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetMyWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_v1.WalletService/GetMyWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetMyWallets(ctx, req.(*GetMyWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_v1.WalletService/GetWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetWallet(ctx, req.(*GetOneWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _WalletService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wallet_v1.WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewWallet",
			Handler:    _WalletService_AddNewWallet_Handler,
		},
		{
			MethodName: "UpdateWallet",
			Handler:    _WalletService_UpdateWallet_Handler,
		},
		{
			MethodName: "GetMyWallets",
			Handler:    _WalletService_GetMyWallets_Handler,
		},
		{
			MethodName: "GetWallet",
			Handler:    _WalletService_GetWallet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flairs-wallet.proto",
}
