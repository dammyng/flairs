{
  "swagger": "2.0",
  "info": {
    "title": "Flairs service",
    "version": "1.0",
    "contact": {
      "name": "flairs mobile banking system",
      "url": "http://www.alphaplus.finance/",
      "email": "dammydarmy@gmail.com"
    }
  },
  "host": "localhost:9000",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/account/login": {
      "post": {
        "summary": "Authorize a user by login",
        "operationId": "FlairsService_LoginUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LoginResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1LoginRequest"
            }
          }
        ],
        "tags": [
          "FlairsService"
        ],
        "security": []
      }
    },
    "/v1/account/reset_password": {
      "post": {
        "summary": "Request to reset user password\nFor a user requesting to reset password",
        "operationId": "FlairsService_ResetUserPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1customResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1resetPasswordRequest"
            }
          }
        ],
        "tags": [
          "FlairsService"
        ]
      }
    },
    "/v1/account/set_password": {
      "post": {
        "summary": "Set a user password\nThe payload contains all required entity for user to set a new password",
        "operationId": "FlairsService_SetUserPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1customResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1setPasswordRequest"
            }
          }
        ],
        "tags": [
          "FlairsService"
        ]
      }
    },
    "/v1/account/user": {
      "put": {
        "summary": "Update User profile",
        "operationId": "FlairsService_UpdateUserProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1updateUserResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1updateUserRequest"
            }
          }
        ],
        "tags": [
          "FlairsService"
        ]
      }
    },
    "/v1/account/user/welcome/{email}": {
      "get": {
        "summary": "Welcome user to the app with a mail\nA welcome email would be sent to the user.",
        "operationId": "FlairsService_WelcomeUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1customResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "email",
            "description": "ID of the created user",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "FlairsService"
        ],
        "security": []
      }
    },
    "/v1/account/user/{email}": {
      "get": {
        "summary": "Create a new user account \nAccepts a unique email address",
        "operationId": "FlairsService_AddNewUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1addNewUserResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "email",
            "description": "Email of user to be added",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ref",
            "description": "Referral code if available.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "FlairsService"
        ],
        "security": []
      }
    },
    "/v1/account/users/{id}": {
      "get": {
        "summary": "Read User with a unique identifier",
        "operationId": "FlairsService_GetUserProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1getUserProfileResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "user id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "token",
            "description": "jwt token for authentication.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "FlairsService"
        ]
      }
    },
    "/v1/account/validation/{email}": {
      "get": {
        "summary": "Request user validation email \nValidates that an email belong to a specific user",
        "operationId": "FlairsService_SendValidationMail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1customResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "email",
            "description": "Email of user to set password",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "FlairsService"
        ],
        "security": []
      }
    },
    "/v1/account/verify_email/{email}/{token}": {
      "get": {
        "summary": "Verify a new email address\nValidated that the token is assign to the specified user",
        "operationId": "FlairsService_ValidateUserEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1customResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "email",
            "description": "Email of user to be validated",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "token",
            "description": "Token for validation",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "FlairsService"
        ],
        "security": []
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1LoginRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "Unique email address of the user entity"
        },
        "password": {
          "type": "string",
          "title": "password of the user entity"
        }
      }
    },
    "v1LoginResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "title": "jwt token for authentication"
        },
        "user": {
          "$ref": "#/definitions/v1Profile",
          "title": "User entity read br request"
        }
      }
    },
    "v1Profile": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "DOB": {
          "type": "string",
          "format": "date-time"
        },
        "gender": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "street": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "countryID": {
          "type": "integer",
          "format": "int64"
        },
        "photo": {
          "type": "string"
        },
        "passport": {
          "type": "string"
        },
        "IDCard": {
          "type": "string"
        },
        "referrer": {
          "type": "string"
        },
        "refCode": {
          "type": "string"
        },
        "howDidYouHearAboutUs": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "emailVerifiedAt": {
          "type": "string",
          "format": "date-time"
        },
        "phoneNumber": {
          "type": "string"
        },
        "phoneVerifiedAt": {
          "type": "string",
          "format": "date-time"
        },
        "ACCOUNT_TYPE": {
          "$ref": "#/definitions/v1ProfileaccountType"
        },
        "lastCardRequested": {
          "type": "string"
        },
        "isProfileCompleted": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1ProfileaccountType": {
      "type": "string",
      "enum": [
        "PERSONAL",
        "BUSINESS"
      ],
      "default": "PERSONAL"
    },
    "v1UpdateBody": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "DOB": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "BVN": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "street": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "countryID": {
          "type": "integer",
          "format": "int64"
        },
        "photo": {
          "type": "string"
        },
        "passport": {
          "type": "string"
        },
        "IDCard": {
          "type": "string"
        },
        "howDidYouHearAboutUs": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "pin": {
          "type": "string",
          "format": "byte"
        },
        "phoneNumber": {
          "type": "string"
        },
        "ACCOUNT_TYPE": {
          "$ref": "#/definitions/v1UpdateBodyaccountType"
        }
      }
    },
    "v1UpdateBodyaccountType": {
      "type": "string",
      "enum": [
        "PERSONAL",
        "BUSINESS"
      ],
      "default": "PERSONAL"
    },
    "v1addNewUserResponse": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "title": "ID of the created user"
        }
      }
    },
    "v1customResponse": {
      "type": "object",
      "properties": {
        "request": {
          "type": "string",
          "title": "Request title for message"
        },
        "message": {
          "type": "string",
          "title": "Custom message in response"
        }
      }
    },
    "v1getUserProfileResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1Profile",
          "title": "User entity read br request"
        }
      }
    },
    "v1resetPasswordRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "Email of the user"
        }
      }
    },
    "v1setPasswordRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "Email of user to set password"
        },
        "password": {
          "type": "string",
          "title": "Password to be added"
        }
      }
    },
    "v1updateUserRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "unique id of profile"
        },
        "profile": {
          "$ref": "#/definitions/v1UpdateBody",
          "title": "profile object to be updated"
        }
      }
    },
    "v1updateUserResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "unique id of profile updated"
        }
      }
    }
  },
  "securityDefinitions": {
    "flairs_token": {
      "type": "apiKey",
      "description": "Authentication token, passed into header",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "flairs_token": []
    }
  ]
}
