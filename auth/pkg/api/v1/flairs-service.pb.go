// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: flairs-service.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type UserAccountType int32

const (
	User_PERSONAL UserAccountType = 0
	User_BUSINESS UserAccountType = 1
)

// Enum value maps for UserAccountType.
var (
	UserAccountType_name = map[int32]string{
		0: "PERSONAL",
		1: "BUSINESS",
	}
	UserAccountType_value = map[string]int32{
		"PERSONAL": 0,
		"BUSINESS": 1,
	}
)

func (x UserAccountType) Enum() *UserAccountType {
	p := new(UserAccountType)
	*p = x
	return p
}

func (x UserAccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserAccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_flairs_service_proto_enumTypes[0].Descriptor()
}

func (UserAccountType) Type() protoreflect.EnumType {
	return &file_flairs_service_proto_enumTypes[0]
}

func (x UserAccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserAccountType.Descriptor instead.
func (UserAccountType) EnumDescriptor() ([]byte, []int) {
	return file_flairs_service_proto_rawDescGZIP(), []int{0, 0}
}

type UpdateBodyAccountType int32

const (
	UpdateBody_PERSONAL UpdateBodyAccountType = 0
	UpdateBody_BUSINESS UpdateBodyAccountType = 1
)

// Enum value maps for UpdateBodyAccountType.
var (
	UpdateBodyAccountType_name = map[int32]string{
		0: "PERSONAL",
		1: "BUSINESS",
	}
	UpdateBodyAccountType_value = map[string]int32{
		"PERSONAL": 0,
		"BUSINESS": 1,
	}
)

func (x UpdateBodyAccountType) Enum() *UpdateBodyAccountType {
	p := new(UpdateBodyAccountType)
	*p = x
	return p
}

func (x UpdateBodyAccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateBodyAccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_flairs_service_proto_enumTypes[1].Descriptor()
}

func (UpdateBodyAccountType) Type() protoreflect.EnumType {
	return &file_flairs_service_proto_enumTypes[1]
}

func (x UpdateBodyAccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateBodyAccountType.Descriptor instead.
func (UpdateBodyAccountType) EnumDescriptor() ([]byte, []int) {
	return file_flairs_service_proto_rawDescGZIP(), []int{1, 0}
}

type ProfileAccountType int32

const (
	Profile_PERSONAL ProfileAccountType = 0
	Profile_BUSINESS ProfileAccountType = 1
)

// Enum value maps for ProfileAccountType.
var (
	ProfileAccountType_name = map[int32]string{
		0: "PERSONAL",
		1: "BUSINESS",
	}
	ProfileAccountType_value = map[string]int32{
		"PERSONAL": 0,
		"BUSINESS": 1,
	}
)

func (x ProfileAccountType) Enum() *ProfileAccountType {
	p := new(ProfileAccountType)
	*p = x
	return p
}

func (x ProfileAccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProfileAccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_flairs_service_proto_enumTypes[2].Descriptor()
}

func (ProfileAccountType) Type() protoreflect.EnumType {
	return &file_flairs_service_proto_enumTypes[2]
}

func (x ProfileAccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProfileAccountType.Descriptor instead.
func (ProfileAccountType) EnumDescriptor() ([]byte, []int) {
	return file_flairs_service_proto_rawDescGZIP(), []int{2, 0}
}

type ReadUserByRequestUserIdentifier int32

const (
	ReadUserByRequest_EMAIL   ReadUserByRequestUserIdentifier = 0
	ReadUserByRequest_ID      ReadUserByRequestUserIdentifier = 1
	ReadUserByRequest_REFCODE ReadUserByRequestUserIdentifier = 2
)

// Enum value maps for ReadUserByRequestUserIdentifier.
var (
	ReadUserByRequestUserIdentifier_name = map[int32]string{
		0: "EMAIL",
		1: "ID",
		2: "REFCODE",
	}
	ReadUserByRequestUserIdentifier_value = map[string]int32{
		"EMAIL":   0,
		"ID":      1,
		"REFCODE": 2,
	}
)

func (x ReadUserByRequestUserIdentifier) Enum() *ReadUserByRequestUserIdentifier {
	p := new(ReadUserByRequestUserIdentifier)
	*p = x
	return p
}

func (x ReadUserByRequestUserIdentifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadUserByRequestUserIdentifier) Descriptor() protoreflect.EnumDescriptor {
	return file_flairs_service_proto_enumTypes[3].Descriptor()
}

func (ReadUserByRequestUserIdentifier) Type() protoreflect.EnumType {
	return &file_flairs_service_proto_enumTypes[3]
}

func (x ReadUserByRequestUserIdentifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadUserByRequestUserIdentifier.Descriptor instead.
func (ReadUserByRequestUserIdentifier) EnumDescriptor() ([]byte, []int) {
	return file_flairs_service_proto_rawDescGZIP(), []int{10, 0}
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   string               `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	FirstName            string               `protobuf:"bytes,2,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName             string               `protobuf:"bytes,3,opt,name=lastName,proto3" json:"lastName,omitempty"`
	DOB                  string               `protobuf:"bytes,4,opt,name=DOB,proto3" json:"DOB,omitempty"`
	Gender               string               `protobuf:"bytes,5,opt,name=gender,proto3" json:"gender,omitempty"`
	BVN                  string               `protobuf:"bytes,6,opt,name=BVN,proto3" json:"BVN,omitempty"`
	Address              string               `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	Street               string               `protobuf:"bytes,8,opt,name=street,proto3" json:"street,omitempty"`
	City                 string               `protobuf:"bytes,9,opt,name=city,proto3" json:"city,omitempty"`
	PostalCode           string               `protobuf:"bytes,10,opt,name=postalCode,proto3" json:"postalCode,omitempty"`
	State                string               `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
	Country              string               `protobuf:"bytes,12,opt,name=country,proto3" json:"country,omitempty"`
	CountryID            uint32               `protobuf:"varint,13,opt,name=countryID,proto3" json:"countryID,omitempty"`
	Photo                string               `protobuf:"bytes,900,opt,name=photo,proto3" json:"photo,omitempty"`
	Passport             string               `protobuf:"bytes,901,opt,name=passport,proto3" json:"passport,omitempty"`
	IDCard               string               `protobuf:"bytes,902,opt,name=IDCard,proto3" json:"IDCard,omitempty"`
	Referrer             string               `protobuf:"bytes,14,opt,name=referrer,proto3" json:"referrer,omitempty"`
	RefCode              string               `protobuf:"bytes,15,opt,name=refCode,proto3" json:"refCode,omitempty"`
	HowDidYouHearAboutUs string               `protobuf:"bytes,16,opt,name=howDidYouHearAboutUs,proto3" json:"howDidYouHearAboutUs,omitempty"`
	UserName             string               `protobuf:"bytes,17,opt,name=userName,proto3" json:"userName,omitempty"`
	Email                string               `protobuf:"bytes,18,opt,name=email,proto3" json:"email,omitempty"`
	EmailVerifiedAt      string               `protobuf:"bytes,19,opt,name=emailVerifiedAt,proto3" json:"emailVerifiedAt,omitempty"`
	Password             []byte               `protobuf:"bytes,20,opt,name=password,proto3" json:"password,omitempty"`
	Pin                  []byte               `protobuf:"bytes,21,opt,name=pin,proto3" json:"pin,omitempty"`
	PhoneNumber          string               `protobuf:"bytes,22,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	PhoneVerifiedAt      string               `protobuf:"bytes,23,opt,name=phoneVerifiedAt,proto3" json:"phoneVerifiedAt,omitempty"`
	ACCOUNT_TYPE         UserAccountType      `protobuf:"varint,24,opt,name=ACCOUNT_TYPE,json=ACCOUNTTYPE,proto3,enum=v1.UserAccountType" json:"ACCOUNT_TYPE,omitempty"`
	LastCardRequested    string               `protobuf:"bytes,25,opt,name=lastCardRequested,proto3" json:"lastCardRequested,omitempty"`
	IsProfileCompleted   bool                 `protobuf:"varint,26,opt,name=isProfileCompleted,proto3" json:"isProfileCompleted,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,29,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,30,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_flairs_service_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *User) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *User) GetDOB() string {
	if x != nil {
		return x.DOB
	}
	return ""
}

func (x *User) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *User) GetBVN() string {
	if x != nil {
		return x.BVN
	}
	return ""
}

func (x *User) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *User) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *User) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *User) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *User) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *User) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *User) GetCountryID() uint32 {
	if x != nil {
		return x.CountryID
	}
	return 0
}

func (x *User) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *User) GetPassport() string {
	if x != nil {
		return x.Passport
	}
	return ""
}

func (x *User) GetIDCard() string {
	if x != nil {
		return x.IDCard
	}
	return ""
}

func (x *User) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *User) GetRefCode() string {
	if x != nil {
		return x.RefCode
	}
	return ""
}

func (x *User) GetHowDidYouHearAboutUs() string {
	if x != nil {
		return x.HowDidYouHearAboutUs
	}
	return ""
}

func (x *User) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetEmailVerifiedAt() string {
	if x != nil {
		return x.EmailVerifiedAt
	}
	return ""
}

func (x *User) GetPassword() []byte {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *User) GetPin() []byte {
	if x != nil {
		return x.Pin
	}
	return nil
}

func (x *User) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *User) GetPhoneVerifiedAt() string {
	if x != nil {
		return x.PhoneVerifiedAt
	}
	return ""
}

func (x *User) GetACCOUNT_TYPE() UserAccountType {
	if x != nil {
		return x.ACCOUNT_TYPE
	}
	return User_PERSONAL
}

func (x *User) GetLastCardRequested() string {
	if x != nil {
		return x.LastCardRequested
	}
	return ""
}

func (x *User) GetIsProfileCompleted() bool {
	if x != nil {
		return x.IsProfileCompleted
	}
	return false
}

func (x *User) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UpdateBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   string                `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	FirstName            string                `protobuf:"bytes,2,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName             string                `protobuf:"bytes,3,opt,name=lastName,proto3" json:"lastName,omitempty"`
	DOB                  string                `protobuf:"bytes,4,opt,name=DOB,proto3" json:"DOB,omitempty"`
	Gender               string                `protobuf:"bytes,5,opt,name=gender,proto3" json:"gender,omitempty"`
	BVN                  string                `protobuf:"bytes,6,opt,name=BVN,proto3" json:"BVN,omitempty"`
	Address              string                `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	Street               string                `protobuf:"bytes,8,opt,name=street,proto3" json:"street,omitempty"`
	City                 string                `protobuf:"bytes,9,opt,name=city,proto3" json:"city,omitempty"`
	PostalCode           string                `protobuf:"bytes,10,opt,name=postalCode,proto3" json:"postalCode,omitempty"`
	State                string                `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
	Country              string                `protobuf:"bytes,12,opt,name=country,proto3" json:"country,omitempty"`
	CountryID            uint32                `protobuf:"varint,13,opt,name=countryID,proto3" json:"countryID,omitempty"`
	Photo                string                `protobuf:"bytes,900,opt,name=photo,proto3" json:"photo,omitempty"`
	Passport             string                `protobuf:"bytes,901,opt,name=passport,proto3" json:"passport,omitempty"`
	IDCard               string                `protobuf:"bytes,902,opt,name=IDCard,proto3" json:"IDCard,omitempty"`
	HowDidYouHearAboutUs string                `protobuf:"bytes,16,opt,name=howDidYouHearAboutUs,proto3" json:"howDidYouHearAboutUs,omitempty"`
	UserName             string                `protobuf:"bytes,17,opt,name=userName,proto3" json:"userName,omitempty"`
	Pin                  []byte                `protobuf:"bytes,21,opt,name=pin,proto3" json:"pin,omitempty"`
	PhoneNumber          string                `protobuf:"bytes,22,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	ACCOUNT_TYPE         UpdateBodyAccountType `protobuf:"varint,24,opt,name=ACCOUNT_TYPE,json=ACCOUNTTYPE,proto3,enum=v1.UpdateBodyAccountType" json:"ACCOUNT_TYPE,omitempty"`
}

func (x *UpdateBody) Reset() {
	*x = UpdateBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBody) ProtoMessage() {}

func (x *UpdateBody) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBody.ProtoReflect.Descriptor instead.
func (*UpdateBody) Descriptor() ([]byte, []int) {
	return file_flairs_service_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateBody) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UpdateBody) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UpdateBody) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UpdateBody) GetDOB() string {
	if x != nil {
		return x.DOB
	}
	return ""
}

func (x *UpdateBody) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *UpdateBody) GetBVN() string {
	if x != nil {
		return x.BVN
	}
	return ""
}

func (x *UpdateBody) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UpdateBody) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *UpdateBody) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UpdateBody) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *UpdateBody) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *UpdateBody) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *UpdateBody) GetCountryID() uint32 {
	if x != nil {
		return x.CountryID
	}
	return 0
}

func (x *UpdateBody) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *UpdateBody) GetPassport() string {
	if x != nil {
		return x.Passport
	}
	return ""
}

func (x *UpdateBody) GetIDCard() string {
	if x != nil {
		return x.IDCard
	}
	return ""
}

func (x *UpdateBody) GetHowDidYouHearAboutUs() string {
	if x != nil {
		return x.HowDidYouHearAboutUs
	}
	return ""
}

func (x *UpdateBody) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UpdateBody) GetPin() []byte {
	if x != nil {
		return x.Pin
	}
	return nil
}

func (x *UpdateBody) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UpdateBody) GetACCOUNT_TYPE() UpdateBodyAccountType {
	if x != nil {
		return x.ACCOUNT_TYPE
	}
	return UpdateBody_PERSONAL
}

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   string               `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	FirstName            string               `protobuf:"bytes,2,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName             string               `protobuf:"bytes,3,opt,name=lastName,proto3" json:"lastName,omitempty"`
	DOB                  *timestamp.Timestamp `protobuf:"bytes,4,opt,name=DOB,proto3" json:"DOB,omitempty"`
	Gender               string               `protobuf:"bytes,5,opt,name=gender,proto3" json:"gender,omitempty"`
	Address              string               `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	Street               string               `protobuf:"bytes,8,opt,name=street,proto3" json:"street,omitempty"`
	City                 string               `protobuf:"bytes,9,opt,name=city,proto3" json:"city,omitempty"`
	PostalCode           string               `protobuf:"bytes,10,opt,name=postalCode,proto3" json:"postalCode,omitempty"`
	State                string               `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
	Country              string               `protobuf:"bytes,12,opt,name=country,proto3" json:"country,omitempty"`
	CountryID            uint32               `protobuf:"varint,13,opt,name=countryID,proto3" json:"countryID,omitempty"`
	Photo                string               `protobuf:"bytes,900,opt,name=photo,proto3" json:"photo,omitempty"`
	Passport             string               `protobuf:"bytes,901,opt,name=passport,proto3" json:"passport,omitempty"`
	IDCard               string               `protobuf:"bytes,902,opt,name=IDCard,proto3" json:"IDCard,omitempty"`
	Referrer             string               `protobuf:"bytes,14,opt,name=referrer,proto3" json:"referrer,omitempty"`
	RefCode              string               `protobuf:"bytes,15,opt,name=refCode,proto3" json:"refCode,omitempty"`
	HowDidYouHearAboutUs string               `protobuf:"bytes,16,opt,name=howDidYouHearAboutUs,proto3" json:"howDidYouHearAboutUs,omitempty"`
	UserName             string               `protobuf:"bytes,17,opt,name=userName,proto3" json:"userName,omitempty"`
	Email                string               `protobuf:"bytes,18,opt,name=email,proto3" json:"email,omitempty"`
	EmailVerifiedAt      *timestamp.Timestamp `protobuf:"bytes,19,opt,name=emailVerifiedAt,proto3" json:"emailVerifiedAt,omitempty"`
	PhoneNumber          string               `protobuf:"bytes,22,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	PhoneVerifiedAt      *timestamp.Timestamp `protobuf:"bytes,23,opt,name=phoneVerifiedAt,proto3" json:"phoneVerifiedAt,omitempty"`
	ACCOUNT_TYPE         ProfileAccountType   `protobuf:"varint,24,opt,name=ACCOUNT_TYPE,json=ACCOUNTTYPE,proto3,enum=v1.ProfileAccountType" json:"ACCOUNT_TYPE,omitempty"`
	LastCardRequested    string               `protobuf:"bytes,25,opt,name=lastCardRequested,proto3" json:"lastCardRequested,omitempty"`
	IsProfileCompleted   bool                 `protobuf:"varint,26,opt,name=isProfileCompleted,proto3" json:"isProfileCompleted,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,29,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,30,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_flairs_service_proto_rawDescGZIP(), []int{2}
}

func (x *Profile) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Profile) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Profile) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Profile) GetDOB() *timestamp.Timestamp {
	if x != nil {
		return x.DOB
	}
	return nil
}

func (x *Profile) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *Profile) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Profile) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *Profile) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Profile) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *Profile) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Profile) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Profile) GetCountryID() uint32 {
	if x != nil {
		return x.CountryID
	}
	return 0
}

func (x *Profile) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *Profile) GetPassport() string {
	if x != nil {
		return x.Passport
	}
	return ""
}

func (x *Profile) GetIDCard() string {
	if x != nil {
		return x.IDCard
	}
	return ""
}

func (x *Profile) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *Profile) GetRefCode() string {
	if x != nil {
		return x.RefCode
	}
	return ""
}

func (x *Profile) GetHowDidYouHearAboutUs() string {
	if x != nil {
		return x.HowDidYouHearAboutUs
	}
	return ""
}

func (x *Profile) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Profile) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Profile) GetEmailVerifiedAt() *timestamp.Timestamp {
	if x != nil {
		return x.EmailVerifiedAt
	}
	return nil
}

func (x *Profile) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *Profile) GetPhoneVerifiedAt() *timestamp.Timestamp {
	if x != nil {
		return x.PhoneVerifiedAt
	}
	return nil
}

func (x *Profile) GetACCOUNT_TYPE() ProfileAccountType {
	if x != nil {
		return x.ACCOUNT_TYPE
	}
	return Profile_PERSONAL
}

func (x *Profile) GetLastCardRequested() string {
	if x != nil {
		return x.LastCardRequested
	}
	return ""
}

func (x *Profile) GetIsProfileCompleted() bool {
	if x != nil {
		return x.IsProfileCompleted
	}
	return false
}

func (x *Profile) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Profile) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type AddNewUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Email of user to be added
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// Referral code if available
	Ref string `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *AddNewUserRequest) Reset() {
	*x = AddNewUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNewUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNewUserRequest) ProtoMessage() {}

func (x *AddNewUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNewUserRequest.ProtoReflect.Descriptor instead.
func (*AddNewUserRequest) Descriptor() ([]byte, []int) {
	return file_flairs_service_proto_rawDescGZIP(), []int{3}
}

func (x *AddNewUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AddNewUserRequest) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

type AddNewUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the created user
	ID string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *AddNewUserResponse) Reset() {
	*x = AddNewUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNewUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNewUserResponse) ProtoMessage() {}

func (x *AddNewUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNewUserResponse.ProtoReflect.Descriptor instead.
func (*AddNewUserResponse) Descriptor() ([]byte, []int) {
	return file_flairs_service_proto_rawDescGZIP(), []int{4}
}

func (x *AddNewUserResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type WelcomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the created user
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *WelcomeRequest) Reset() {
	*x = WelcomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WelcomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WelcomeRequest) ProtoMessage() {}

func (x *WelcomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WelcomeRequest.ProtoReflect.Descriptor instead.
func (*WelcomeRequest) Descriptor() ([]byte, []int) {
	return file_flairs_service_proto_rawDescGZIP(), []int{5}
}

func (x *WelcomeRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type ValidateEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Email of user to be validated
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// Token for validation
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ValidateEmailRequest) Reset() {
	*x = ValidateEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateEmailRequest) ProtoMessage() {}

func (x *ValidateEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateEmailRequest.ProtoReflect.Descriptor instead.
func (*ValidateEmailRequest) Descriptor() ([]byte, []int) {
	return file_flairs_service_proto_rawDescGZIP(), []int{6}
}

func (x *ValidateEmailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ValidateEmailRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SetPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Email of user to set password
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	// Password to be added
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *SetPasswordRequest) Reset() {
	*x = SetPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPasswordRequest) ProtoMessage() {}

func (x *SetPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPasswordRequest.ProtoReflect.Descriptor instead.
func (*SetPasswordRequest) Descriptor() ([]byte, []int) {
	return file_flairs_service_proto_rawDescGZIP(), []int{7}
}

func (x *SetPasswordRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SetPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ResetPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Email of the user
	Email string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *ResetPasswordRequest) Reset() {
	*x = ResetPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPasswordRequest) ProtoMessage() {}

func (x *ResetPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPasswordRequest.ProtoReflect.Descriptor instead.
func (*ResetPasswordRequest) Descriptor() ([]byte, []int) {
	return file_flairs_service_proto_rawDescGZIP(), []int{8}
}

func (x *ResetPasswordRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type SendValidationMailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Email of user to set password
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *SendValidationMailRequest) Reset() {
	*x = SendValidationMailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendValidationMailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendValidationMailRequest) ProtoMessage() {}

func (x *SendValidationMailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendValidationMailRequest.ProtoReflect.Descriptor instead.
func (*SendValidationMailRequest) Descriptor() ([]byte, []int) {
	return file_flairs_service_proto_rawDescGZIP(), []int{9}
}

func (x *SendValidationMailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type ReadUserByRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// jwt token for authentication
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// Unique identifier  of user to be read
	Identifier ReadUserByRequestUserIdentifier `protobuf:"varint,3,opt,name=identifier,proto3,enum=v1.ReadUserByRequestUserIdentifier" json:"identifier,omitempty"`
	IValue     string                          `protobuf:"bytes,4,opt,name=iValue,proto3" json:"iValue,omitempty"`
}

func (x *ReadUserByRequest) Reset() {
	*x = ReadUserByRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadUserByRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadUserByRequest) ProtoMessage() {}

func (x *ReadUserByRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadUserByRequest.ProtoReflect.Descriptor instead.
func (*ReadUserByRequest) Descriptor() ([]byte, []int) {
	return file_flairs_service_proto_rawDescGZIP(), []int{10}
}

func (x *ReadUserByRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ReadUserByRequest) GetIdentifier() ReadUserByRequestUserIdentifier {
	if x != nil {
		return x.Identifier
	}
	return ReadUserByRequest_EMAIL
}

func (x *ReadUserByRequest) GetIValue() string {
	if x != nil {
		return x.IValue
	}
	return ""
}

type ReadUserByResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User entity read br request
	User *Profile `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *ReadUserByResponse) Reset() {
	*x = ReadUserByResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadUserByResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadUserByResponse) ProtoMessage() {}

func (x *ReadUserByResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadUserByResponse.ProtoReflect.Descriptor instead.
func (*ReadUserByResponse) Descriptor() ([]byte, []int) {
	return file_flairs_service_proto_rawDescGZIP(), []int{11}
}

func (x *ReadUserByResponse) GetUser() *Profile {
	if x != nil {
		return x.User
	}
	return nil
}

type UpdateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique id of profile
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// profile object to be updated
	Profile *UpdateBody `protobuf:"bytes,3,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *UpdateUserRequest) Reset() {
	*x = UpdateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRequest) ProtoMessage() {}

func (x *UpdateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return file_flairs_service_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateUserRequest) GetProfile() *UpdateBody {
	if x != nil {
		return x.Profile
	}
	return nil
}

type UpdateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique id of profile updated
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UpdateUserResponse) Reset() {
	*x = UpdateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserResponse) ProtoMessage() {}

func (x *UpdateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserResponse) Descriptor() ([]byte, []int) {
	return file_flairs_service_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateUserResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique email address of the user entity
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// password of the user entity
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_flairs_service_proto_rawDescGZIP(), []int{14}
}

func (x *LoginRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// jwt token for authentication
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// User entity read br request
	User *Profile `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_flairs_service_proto_rawDescGZIP(), []int{15}
}

func (x *LoginResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginResponse) GetUser() *Profile {
	if x != nil {
		return x.User
	}
	return nil
}

type CustomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request title for message
	Request string `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	// Custom message in response
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CustomResponse) Reset() {
	*x = CustomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flairs_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomResponse) ProtoMessage() {}

func (x *CustomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flairs_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomResponse.ProtoReflect.Descriptor instead.
func (*CustomResponse) Descriptor() ([]byte, []int) {
	return file_flairs_service_proto_rawDescGZIP(), []int{16}
}

func (x *CustomResponse) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

func (x *CustomResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_flairs_service_proto protoreflect.FileDescriptor

var file_flairs_service_proto_rawDesc = []byte{
	0x0a, 0x14, 0x66, 0x6c, 0x61, 0x69, 0x72, 0x73, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x08, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x4f,
	0x42, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x44, 0x4f, 0x42, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x56, 0x4e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x42, 0x56, 0x4e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x18, 0x84, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x12, 0x1b, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x85, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x17,
	0x0a, 0x06, 0x49, 0x44, 0x43, 0x61, 0x72, 0x64, 0x18, 0x86, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x49, 0x44, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a,
	0x14, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x64, 0x59, 0x6f, 0x75, 0x48, 0x65, 0x61, 0x72, 0x41, 0x62,
	0x6f, 0x75, 0x74, 0x55, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x68, 0x6f, 0x77,
	0x44, 0x69, 0x64, 0x59, 0x6f, 0x75, 0x48, 0x65, 0x61, 0x72, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x55,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x29, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x01, 0x22, 0x81, 0x05,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x4f, 0x42, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x44, 0x4f, 0x42, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x42, 0x56, 0x4e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x42,
	0x56, 0x4e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18,
	0x84, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x85, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x49, 0x44,
	0x43, 0x61, 0x72, 0x64, 0x18, 0x86, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x44, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x64, 0x59, 0x6f, 0x75,
	0x48, 0x65, 0x61, 0x72, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x55, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x64, 0x59, 0x6f, 0x75, 0x48, 0x65, 0x61, 0x72,
	0x41, 0x62, 0x6f, 0x75, 0x74, 0x55, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x22, 0x29, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41,
	0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x22, 0x9d, 0x08, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x44, 0x4f, 0x42, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x03, 0x44, 0x4f, 0x42, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x44, 0x12, 0x15, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x84, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x85, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x49, 0x44, 0x43, 0x61, 0x72, 0x64, 0x18,
	0x86, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x44, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x66, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x64, 0x59, 0x6f,
	0x75, 0x48, 0x65, 0x61, 0x72, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x55, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x64, 0x59, 0x6f, 0x75, 0x48, 0x65, 0x61,
	0x72, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x55, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x44, 0x0a, 0x0f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x44, 0x0a, 0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x41, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x69, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x29, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41,
	0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x22, 0x3b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0x24,
	0x0a, 0x12, 0x61, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x22, 0x26, 0x0a, 0x0e, 0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x42, 0x0a, 0x14,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x46, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x2c, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x31, 0x0a, 0x19, 0x73, 0x65, 0x6e, 0x64, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xbb, 0x01, 0x0a, 0x11, 0x72, 0x65,
	0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x45, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x31, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45,
	0x46, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x22, 0x35, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x4d,
	0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x24, 0x0a,
	0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x46, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x44, 0x0a,
	0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0xb0, 0x07, 0x0a, 0x0d, 0x46, 0x6c, 0x61, 0x69, 0x72, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x7d, 0x92, 0x41, 0x02, 0x62, 0x00, 0x12, 0x64, 0x0a, 0x0b, 0x57, 0x65, 0x6c,
	0x63, 0x6f, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x77, 0x65,
	0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x77, 0x65, 0x6c, 0x63, 0x6f,
	0x6d, 0x65, 0x2f, 0x7b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x7d, 0x92, 0x41, 0x02, 0x62, 0x00, 0x12,
	0x78, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x2f, 0x7b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x7d, 0x2f, 0x7b, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x7d, 0x92, 0x41, 0x02, 0x62, 0x00, 0x12, 0x62, 0x0a, 0x0f, 0x53, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x73, 0x65,
	0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x68, 0x0a,
	0x11, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x74, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x2e,
	0x76, 0x31, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x7b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x7d, 0x92, 0x41, 0x02, 0x62, 0x00, 0x12, 0x53, 0x0a,
	0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x10, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x02,
	0x62, 0x00, 0x12, 0x61, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79,
	0x12, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x61,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x5f, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x76, 0x31, 0x2e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x15, 0x1a, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x42, 0xca, 0x02, 0x92, 0x41, 0xc6, 0x02, 0x12, 0x6a, 0x0a,
	0x0e, 0x46, 0x6c, 0x61, 0x69, 0x72, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22,
	0x53, 0x0a, 0x1c, 0x66, 0x6c, 0x61, 0x69, 0x72, 0x73, 0x20, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x20, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x1d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x1a, 0x14,
	0x64, 0x61, 0x6d, 0x6d, 0x79, 0x64, 0x61, 0x72, 0x6d, 0x79, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x1a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x68, 0x6f, 0x73, 0x74, 0x3a, 0x39, 0x30, 0x30, 0x30, 0x2a, 0x02, 0x01, 0x02, 0x32, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x52, 0x3b, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x34, 0x0a, 0x2a, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x07, 0x5a, 0x4f,
	0x0a, 0x4d, 0x0a, 0x0c, 0x66, 0x6c, 0x61, 0x69, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x3d, 0x08, 0x02, 0x12, 0x28, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x0d,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62,
	0x12, 0x0a, 0x10, 0x0a, 0x0c, 0x66, 0x6c, 0x61, 0x69, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flairs_service_proto_rawDescOnce sync.Once
	file_flairs_service_proto_rawDescData = file_flairs_service_proto_rawDesc
)

func file_flairs_service_proto_rawDescGZIP() []byte {
	file_flairs_service_proto_rawDescOnce.Do(func() {
		file_flairs_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_flairs_service_proto_rawDescData)
	})
	return file_flairs_service_proto_rawDescData
}

var file_flairs_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_flairs_service_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_flairs_service_proto_goTypes = []interface{}{
	(UserAccountType)(0),                 // 0: v1.User.accountType
	(UpdateBodyAccountType)(0),           // 1: v1.UpdateBody.accountType
	(ProfileAccountType)(0),              // 2: v1.Profile.accountType
	(ReadUserByRequestUserIdentifier)(0), // 3: v1.readUserByRequest.user_identifier
	(*User)(nil),                         // 4: v1.User
	(*UpdateBody)(nil),                   // 5: v1.UpdateBody
	(*Profile)(nil),                      // 6: v1.Profile
	(*AddNewUserRequest)(nil),            // 7: v1.addNewUserRequest
	(*AddNewUserResponse)(nil),           // 8: v1.addNewUserResponse
	(*WelcomeRequest)(nil),               // 9: v1.welcomeRequest
	(*ValidateEmailRequest)(nil),         // 10: v1.validateEmailRequest
	(*SetPasswordRequest)(nil),           // 11: v1.setPasswordRequest
	(*ResetPasswordRequest)(nil),         // 12: v1.resetPasswordRequest
	(*SendValidationMailRequest)(nil),    // 13: v1.sendValidationMailRequest
	(*ReadUserByRequest)(nil),            // 14: v1.readUserByRequest
	(*ReadUserByResponse)(nil),           // 15: v1.readUserByResponse
	(*UpdateUserRequest)(nil),            // 16: v1.updateUserRequest
	(*UpdateUserResponse)(nil),           // 17: v1.updateUserResponse
	(*LoginRequest)(nil),                 // 18: v1.LoginRequest
	(*LoginResponse)(nil),                // 19: v1.LoginResponse
	(*CustomResponse)(nil),               // 20: v1.customResponse
	(*timestamp.Timestamp)(nil),          // 21: google.protobuf.Timestamp
}
var file_flairs_service_proto_depIdxs = []int32{
	0,  // 0: v1.User.ACCOUNT_TYPE:type_name -> v1.User.accountType
	21, // 1: v1.User.createdAt:type_name -> google.protobuf.Timestamp
	21, // 2: v1.User.updatedAt:type_name -> google.protobuf.Timestamp
	1,  // 3: v1.UpdateBody.ACCOUNT_TYPE:type_name -> v1.UpdateBody.accountType
	21, // 4: v1.Profile.DOB:type_name -> google.protobuf.Timestamp
	21, // 5: v1.Profile.emailVerifiedAt:type_name -> google.protobuf.Timestamp
	21, // 6: v1.Profile.phoneVerifiedAt:type_name -> google.protobuf.Timestamp
	2,  // 7: v1.Profile.ACCOUNT_TYPE:type_name -> v1.Profile.accountType
	21, // 8: v1.Profile.createdAt:type_name -> google.protobuf.Timestamp
	21, // 9: v1.Profile.updatedAt:type_name -> google.protobuf.Timestamp
	3,  // 10: v1.readUserByRequest.identifier:type_name -> v1.readUserByRequest.user_identifier
	6,  // 11: v1.readUserByResponse.user:type_name -> v1.Profile
	5,  // 12: v1.updateUserRequest.profile:type_name -> v1.UpdateBody
	6,  // 13: v1.LoginResponse.user:type_name -> v1.Profile
	7,  // 14: v1.FlairsService.AddNewUser:input_type -> v1.addNewUserRequest
	9,  // 15: v1.FlairsService.WelcomeUser:input_type -> v1.welcomeRequest
	10, // 16: v1.FlairsService.ValidateUserEmail:input_type -> v1.validateEmailRequest
	11, // 17: v1.FlairsService.SetUserPassword:input_type -> v1.setPasswordRequest
	12, // 18: v1.FlairsService.ResetUserPassword:input_type -> v1.resetPasswordRequest
	13, // 19: v1.FlairsService.SendValidationMail:input_type -> v1.sendValidationMailRequest
	18, // 20: v1.FlairsService.LoginUser:input_type -> v1.LoginRequest
	14, // 21: v1.FlairsService.ReadUserBy:input_type -> v1.readUserByRequest
	16, // 22: v1.FlairsService.UpdateUserProfile:input_type -> v1.updateUserRequest
	8,  // 23: v1.FlairsService.AddNewUser:output_type -> v1.addNewUserResponse
	20, // 24: v1.FlairsService.WelcomeUser:output_type -> v1.customResponse
	20, // 25: v1.FlairsService.ValidateUserEmail:output_type -> v1.customResponse
	20, // 26: v1.FlairsService.SetUserPassword:output_type -> v1.customResponse
	20, // 27: v1.FlairsService.ResetUserPassword:output_type -> v1.customResponse
	20, // 28: v1.FlairsService.SendValidationMail:output_type -> v1.customResponse
	19, // 29: v1.FlairsService.LoginUser:output_type -> v1.LoginResponse
	15, // 30: v1.FlairsService.ReadUserBy:output_type -> v1.readUserByResponse
	17, // 31: v1.FlairsService.UpdateUserProfile:output_type -> v1.updateUserResponse
	23, // [23:32] is the sub-list for method output_type
	14, // [14:23] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_flairs_service_proto_init() }
func file_flairs_service_proto_init() {
	if File_flairs_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flairs_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNewUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNewUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WelcomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendValidationMailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadUserByRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadUserByResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flairs_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flairs_service_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flairs_service_proto_goTypes,
		DependencyIndexes: file_flairs_service_proto_depIdxs,
		EnumInfos:         file_flairs_service_proto_enumTypes,
		MessageInfos:      file_flairs_service_proto_msgTypes,
	}.Build()
	File_flairs_service_proto = out.File
	file_flairs_service_proto_rawDesc = nil
	file_flairs_service_proto_goTypes = nil
	file_flairs_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FlairsServiceClient is the client API for FlairsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlairsServiceClient interface {
	// Create a new user
	AddNewUser(ctx context.Context, in *AddNewUserRequest, opts ...grpc.CallOption) (*AddNewUserResponse, error)
	// Welcome user to the app with a mail
	WelcomeUser(ctx context.Context, in *WelcomeRequest, opts ...grpc.CallOption) (*CustomResponse, error)
	// Verify a new email address
	ValidateUserEmail(ctx context.Context, in *ValidateEmailRequest, opts ...grpc.CallOption) (*CustomResponse, error)
	// Set a user password
	SetUserPassword(ctx context.Context, in *SetPasswordRequest, opts ...grpc.CallOption) (*CustomResponse, error)
	// Request to reset user password
	ResetUserPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*CustomResponse, error)
	// Request user validation email
	SendValidationMail(ctx context.Context, in *SendValidationMailRequest, opts ...grpc.CallOption) (*CustomResponse, error)
	// Authorize a user by login
	LoginUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Read User with a unique identifier
	ReadUserBy(ctx context.Context, in *ReadUserByRequest, opts ...grpc.CallOption) (*ReadUserByResponse, error)
	// Update User profile
	UpdateUserProfile(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
}

type flairsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlairsServiceClient(cc grpc.ClientConnInterface) FlairsServiceClient {
	return &flairsServiceClient{cc}
}

func (c *flairsServiceClient) AddNewUser(ctx context.Context, in *AddNewUserRequest, opts ...grpc.CallOption) (*AddNewUserResponse, error) {
	out := new(AddNewUserResponse)
	err := c.cc.Invoke(ctx, "/v1.FlairsService/AddNewUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flairsServiceClient) WelcomeUser(ctx context.Context, in *WelcomeRequest, opts ...grpc.CallOption) (*CustomResponse, error) {
	out := new(CustomResponse)
	err := c.cc.Invoke(ctx, "/v1.FlairsService/WelcomeUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flairsServiceClient) ValidateUserEmail(ctx context.Context, in *ValidateEmailRequest, opts ...grpc.CallOption) (*CustomResponse, error) {
	out := new(CustomResponse)
	err := c.cc.Invoke(ctx, "/v1.FlairsService/ValidateUserEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flairsServiceClient) SetUserPassword(ctx context.Context, in *SetPasswordRequest, opts ...grpc.CallOption) (*CustomResponse, error) {
	out := new(CustomResponse)
	err := c.cc.Invoke(ctx, "/v1.FlairsService/SetUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flairsServiceClient) ResetUserPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*CustomResponse, error) {
	out := new(CustomResponse)
	err := c.cc.Invoke(ctx, "/v1.FlairsService/ResetUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flairsServiceClient) SendValidationMail(ctx context.Context, in *SendValidationMailRequest, opts ...grpc.CallOption) (*CustomResponse, error) {
	out := new(CustomResponse)
	err := c.cc.Invoke(ctx, "/v1.FlairsService/SendValidationMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flairsServiceClient) LoginUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/v1.FlairsService/LoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flairsServiceClient) ReadUserBy(ctx context.Context, in *ReadUserByRequest, opts ...grpc.CallOption) (*ReadUserByResponse, error) {
	out := new(ReadUserByResponse)
	err := c.cc.Invoke(ctx, "/v1.FlairsService/ReadUserBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flairsServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/v1.FlairsService/UpdateUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlairsServiceServer is the server API for FlairsService service.
type FlairsServiceServer interface {
	// Create a new user
	AddNewUser(context.Context, *AddNewUserRequest) (*AddNewUserResponse, error)
	// Welcome user to the app with a mail
	WelcomeUser(context.Context, *WelcomeRequest) (*CustomResponse, error)
	// Verify a new email address
	ValidateUserEmail(context.Context, *ValidateEmailRequest) (*CustomResponse, error)
	// Set a user password
	SetUserPassword(context.Context, *SetPasswordRequest) (*CustomResponse, error)
	// Request to reset user password
	ResetUserPassword(context.Context, *ResetPasswordRequest) (*CustomResponse, error)
	// Request user validation email
	SendValidationMail(context.Context, *SendValidationMailRequest) (*CustomResponse, error)
	// Authorize a user by login
	LoginUser(context.Context, *LoginRequest) (*LoginResponse, error)
	// Read User with a unique identifier
	ReadUserBy(context.Context, *ReadUserByRequest) (*ReadUserByResponse, error)
	// Update User profile
	UpdateUserProfile(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
}

// UnimplementedFlairsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFlairsServiceServer struct {
}

func (*UnimplementedFlairsServiceServer) AddNewUser(context.Context, *AddNewUserRequest) (*AddNewUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewUser not implemented")
}
func (*UnimplementedFlairsServiceServer) WelcomeUser(context.Context, *WelcomeRequest) (*CustomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WelcomeUser not implemented")
}
func (*UnimplementedFlairsServiceServer) ValidateUserEmail(context.Context, *ValidateEmailRequest) (*CustomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateUserEmail not implemented")
}
func (*UnimplementedFlairsServiceServer) SetUserPassword(context.Context, *SetPasswordRequest) (*CustomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserPassword not implemented")
}
func (*UnimplementedFlairsServiceServer) ResetUserPassword(context.Context, *ResetPasswordRequest) (*CustomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUserPassword not implemented")
}
func (*UnimplementedFlairsServiceServer) SendValidationMail(context.Context, *SendValidationMailRequest) (*CustomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendValidationMail not implemented")
}
func (*UnimplementedFlairsServiceServer) LoginUser(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (*UnimplementedFlairsServiceServer) ReadUserBy(context.Context, *ReadUserByRequest) (*ReadUserByResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUserBy not implemented")
}
func (*UnimplementedFlairsServiceServer) UpdateUserProfile(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}

func RegisterFlairsServiceServer(s *grpc.Server, srv FlairsServiceServer) {
	s.RegisterService(&_FlairsService_serviceDesc, srv)
}

func _FlairsService_AddNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlairsServiceServer).AddNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FlairsService/AddNewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlairsServiceServer).AddNewUser(ctx, req.(*AddNewUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlairsService_WelcomeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WelcomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlairsServiceServer).WelcomeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FlairsService/WelcomeUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlairsServiceServer).WelcomeUser(ctx, req.(*WelcomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlairsService_ValidateUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlairsServiceServer).ValidateUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FlairsService/ValidateUserEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlairsServiceServer).ValidateUserEmail(ctx, req.(*ValidateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlairsService_SetUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlairsServiceServer).SetUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FlairsService/SetUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlairsServiceServer).SetUserPassword(ctx, req.(*SetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlairsService_ResetUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlairsServiceServer).ResetUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FlairsService/ResetUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlairsServiceServer).ResetUserPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlairsService_SendValidationMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendValidationMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlairsServiceServer).SendValidationMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FlairsService/SendValidationMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlairsServiceServer).SendValidationMail(ctx, req.(*SendValidationMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlairsService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlairsServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FlairsService/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlairsServiceServer).LoginUser(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlairsService_ReadUserBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadUserByRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlairsServiceServer).ReadUserBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FlairsService/ReadUserBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlairsServiceServer).ReadUserBy(ctx, req.(*ReadUserByRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlairsService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlairsServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FlairsService/UpdateUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlairsServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlairsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.FlairsService",
	HandlerType: (*FlairsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewUser",
			Handler:    _FlairsService_AddNewUser_Handler,
		},
		{
			MethodName: "WelcomeUser",
			Handler:    _FlairsService_WelcomeUser_Handler,
		},
		{
			MethodName: "ValidateUserEmail",
			Handler:    _FlairsService_ValidateUserEmail_Handler,
		},
		{
			MethodName: "SetUserPassword",
			Handler:    _FlairsService_SetUserPassword_Handler,
		},
		{
			MethodName: "ResetUserPassword",
			Handler:    _FlairsService_ResetUserPassword_Handler,
		},
		{
			MethodName: "SendValidationMail",
			Handler:    _FlairsService_SendValidationMail_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _FlairsService_LoginUser_Handler,
		},
		{
			MethodName: "ReadUserBy",
			Handler:    _FlairsService_ReadUserBy_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _FlairsService_UpdateUserProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flairs-service.proto",
}
